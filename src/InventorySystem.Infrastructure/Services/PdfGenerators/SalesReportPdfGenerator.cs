using Project.Application.Common.Interfaces.PdfGenerators;
using Project.Application.Features.Reports.Sales.Dtos;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace Infrastructure.Services.PdfGenerators
{
    internal class SalesReportPdfGenerator : ISalesReportPdfGenerator
    {
        public byte[] GenerateSalesReportPdf(IEnumerable<SalesReportDto> data, DateTime fromDate, DateTime toDate)
        {
            QuestPDF.Settings.License = LicenseType.Community;

            return Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.DefaultTextStyle(x => x.FontSize(12));

                    page.Header().Text($"Sales Report")
                        .SemiBold().FontSize(18).FontColor(Colors.Blue.Medium);

                    page.Content().Column(col =>
                    {
                        col.Spacing(10);

                        col.Item().Text($"Date Range: {fromDate:yyyy-MM-dd} to {toDate:yyyy-MM-dd}");
                        col.Item().Text($"Generated On: {DateTime.Now:yyyy-MM-dd HH:mm}");

                        col.Item().LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.ConstantColumn(40);  // #
                                columns.RelativeColumn(2);   // Product
                                columns.ConstantColumn(60);  // Units Sold
                                columns.ConstantColumn(80);  // Price
                                columns.ConstantColumn(90);  // Total Revenue
                                columns.RelativeColumn();    // Category
                            });

                            table.Header(header =>
                            {
                                header.Cell().Text("#").SemiBold();
                                header.Cell().Text("Product").SemiBold();
                                header.Cell().Text("Units Sold").SemiBold();
                                header.Cell().Text("Price").SemiBold();
                                header.Cell().Text("Revenue").SemiBold();
                                header.Cell().Text("Category").SemiBold();
                            });

                            int index = 1;
                            foreach (var item in data)
                            {
                                table.Cell().Text(index++);
                                table.Cell().Text(item.ProductName);
                                table.Cell().Text(item.UnitsSold.ToString());
                                table.Cell().Text($"{item.SellingPrice:C}");
                                table.Cell().Text($"{item.TotalRevenue:C}");
                                table.Cell().Text(item.CategoryName ?? "-");
                            }
                        });

                        col.Item().LineHorizontal(1).LineColor(Colors.Grey.Lighten2);
                        col.Item().Text("Generated by Inventory System").Italic().FontSize(10);
                    });
                });
            }).GeneratePdf();
        }
    }

}
