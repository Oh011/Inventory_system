using Project.Application.Common.Interfaces.PdfGenerators;
using Project.Application.Features.Inventory.Dtos;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace Infrastructure.Services
{
    internal class StockAdjustmentLogPdfGenerator : IStockAdjustmentLogPdfGenerator
    {
        public byte[] Generate(List<StockAdjustmentLogDto> logs)
        {
            QuestPDF.Settings.License = LicenseType.Community;

            return Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.DefaultTextStyle(x => x.FontSize(12));

                    page.Header().Text("Stock Adjustment Logs")
                        .SemiBold().FontSize(18).FontColor(Colors.Indigo.Medium);

                    page.Content().Column(col =>
                    {
                        col.Spacing(10);

                        col.Item().Text($"Export Date: {DateTime.Now:yyyy-MM-dd HH:mm}");

                        col.Item().LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.ConstantColumn(30);   // #
                                columns.RelativeColumn(2);    // Product
                                columns.RelativeColumn();     // Qty Change
                                columns.RelativeColumn(2);    // Reason
                                columns.RelativeColumn();     // Date
                                columns.RelativeColumn(2);    // Adjusted By
                            });

                            table.Header(header =>
                            {
                                header.Cell().Text("#").SemiBold();
                                header.Cell().Text("Product").SemiBold();
                                header.Cell().Text("Qty").SemiBold();
                                header.Cell().Text("Reason").SemiBold();
                                header.Cell().Text("Date").SemiBold();
                                header.Cell().Text("Adjusted By").SemiBold();
                            });

                            int index = 1;
                            foreach (var log in logs)
                            {
                                table.Cell().Text(index++);
                                table.Cell().Text($"{log.ProductName} (ID: {log.ProductId})");
                                table.Cell().Text(log.QuantityChange.ToString());
                                table.Cell().Text(log.Reason);
                                table.Cell().Text(log.AdjustedAt.ToString("yyyy-MM-dd HH:mm"));
                                table.Cell().Text(log.AdjustedByName);
                            }
                        });
                    });

                    page.Footer()
                        .AlignCenter()
                        .Text(text =>
                        {
                            text.Span("Smart Inventory System • ").FontSize(10);
                            text.Span("Generated by Omar's App").FontSize(10).Italic();
                        });
                });
            }).GeneratePdf();
        }
    }
}
